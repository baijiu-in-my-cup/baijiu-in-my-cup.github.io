---
layout: post
title: "Vibe Coding 真能干掉程序员吗？一个父亲节特别项目"
subtitle:   "Can Vibe Coding really replace programmers? A special project for Father's Day"
date:       2025-06-15 11:30:00
author:     "Bryan"
header-mask: 0.3
catalog:    true
tags:
    - llm
    - Vibe coding
---

## 背景介绍
今年以来，关于 Vibe Coding 的内容就持续出现，甚至经常会还有程序员会被完全替代的说法。从我之前的经验来看，出现的这种新现象主要来自于两种情况：

- 大模型的特定领域的能力逐渐成熟，考虑到大模型一次性解决所有行业变得不那么现实的情况下，当前的大模型会有意识在特定领域进行明显的强化，比如编程，数学等。

- 行业工具的成熟，随着 Cursor，Windsurf，v0 等工具的成熟，大模型 + 领域场景的优化，让大模型在特定领域的能力得到了明显的提升。

作为一个偏向后端与算法的程序员，之前也有一些短暂的前端开发经验，但是当前最热门的前端框架可能就不那么熟悉了。本次就是期望借助 Vibe Coding 工具来进行简单实践，验证当前 Vibe Coding 是否足够成熟，程序员这个职业是否已经岌岌可危了。同时，这也是一个父亲节特别项目，希望能为家里的小朋友创造一个有趣的学习工具。

## 编程工具统计

在开始具体的产品开发前，可以先了解下目前主流的 AI 编程工具，有研究者将现有的 AI 编程工具参考自动驾驶的划分将当前的编程工具划分为 [L1-L5](https://prompt.16x.engineer/blog/ai-coding-l1-l5) 的等级：

| 等级 | 特点 | 代表工具 |
| --- | --- | --- |
| L1 | 代码补全 | GitHub Copilot, Tabby, Codium |
| L2 | 任务级别代码生成 | Cursor, Windsurf |
| L3 | 项目级别代码生成 | Claude Code, Codegen, v0 |
| L4 | PRD 生成产品 | Devin, Lovable |
| L5 | 人工智能开发团队 | AutoDev, MetaGPT, MGX |

实际的产品成熟度统计如下所示：

![tools](/img/in-post/vibe-coding/tools.png)

在本次的实践中，我选择了其中 L3 级别的工具 [v0](https://v0.dev/) 进行实践，验证是否能帮助我完成一个简单的产品开发。

## 数学小游戏实践

因为家里有一个 6 岁左右的小朋友，数学基础一直不太好，特别是加减法，本次实践就选择了一个简单的数学小游戏进行实践，期望通过这个简单的游戏，帮助小朋友提高数学基础。

#### 产品 PRD 定义

最初只有一个模糊的产品需求，对于产品形态没有明确的想法，对于如何借助工具帮助小朋友增强加减法的能力也没有明确的想法。

因此首先将原始需求进行明确，转换为明确的 PRD 文档，在这个沟通过程中，才能更好地确定产品形态。

这一步我主要借助各个大模型（DeepSeek, ChatGPT, Grok, Germini），采用多路赛马的机制，将同样的 prompt 发送给不同的大模型，从不同的结果中挑选出有启发性的想法，根据更加明确的想法调整 prompt，再进行下一轮迭代，直到思路明确足以生成最终的 PRD 文档。

最终我确定产品需要有科学性，趣味性，而且容易理解，构造的 prompt 如下所示：

```
我六岁的女儿数学能力不是特别好，特别是不擅长数学加减法，我考虑制作一个 web 服务帮助她更好地掌握这方面的数学知识，请问可以制作一个怎样的服务。作为资深的儿童教育专家，请给我一些具体的产品方案规划与建议。请注意下面的内容：
1. 产品需要有科学性，你需要确保确实能帮助小朋友更好地掌握数学加减法；
2. 这个产品需要有趣味性，方便吸引小朋友参与，不要做成一个简单的做题目与简单答案的工具；
3. 考虑到小朋友认识的文字有限，需要避免大量的文字描述，需要相对容易小朋友理解；
```

多个大模型给出的方案中最终选择了 ChatGPT + DeepSeek 的方案组合，存在四大学习区，类似如下所示：

![study-zones](/img/in-post/vibe-coding/study-zones.png)

#### 产品实现

将最终生成的产品 PRD 提交给 v0 进行简单实践，最终生成了四个核心的游戏模块，部分页面如下所示：

![game1](/img/in-post/vibe-coding/game1.png)

![game2](/img/in-post/vibe-coding/game2.png)

![game3](/img/in-post/vibe-coding/game3.png)

从 PRD 到产品实现非常顺利，在几分钟内就完成了页面的开发, 而且一次性完成就能顺利运行。小朋友实际上手体验了一下，数字厨房和动物运动会的小游戏很喜欢，但是太空加油站和音乐数字屋不太喜欢。

实际体验发现存在如下问题：

- 具体的游戏设计得相对简单，场景的重复度比较高；
- 需求描述不够清晰的情况下，实际的玩法与原始 PRD 描述存在差异；
- 只能支持相对简单的动作，无法支持 PRD 中相对复杂的操作，比如需要拖拽或音频相关的能力；

根据当前实际的能力限制，将游戏模块进行了调整，针对原有功能需求重新设计了游戏场景，设计了两个全新的游戏模块，小熊糖果铺与森林送礼物，通过明确的功能需求，v0 根据明确的新需求快速进行了调整，生成的新游戏场景页面如下所示：

![game4](/img/in-post/vibe-coding/game4.png)

![game5](/img/in-post/vibe-coding/game5.png)

实际的风格相对统一，而且实际发现在功能更加明确的情况下，v0 生成的效果会更加符合预期。这下娃真的喜欢了。

最终完整的产品在线地址为 https://v0-math-learning-platform-phi.vercel.app/ , 感兴趣的可以在线上体验一下。当然目前是白嫖 vercel 的免费托管服务，国内访问可能不一定稳定，建议自备梯子访问。

## 总结

本次父亲节之际，针对实际的模糊需求，借助大模型工具完整体验了 Vibe Coding，在没有手工编写一行代码的情况下，完成了产品从 PRD 到产品实现的完整过程。

事实上在此之前，还尝试过基于 v0 完成过一个更加复杂的产品需求，当产品需求相对简单时，v0 的生成效果相对不错，但是当需求开始变得复杂，甚至涉及到不同前后端不同语言的混合开发时，v0 的生成效果就不那么理想，甚至会卡在特定的异常下始终无法正确解决。因此也有一种说法，Vibe Coding 可能因为 bug 修复时间过长而失去价值。

从我的实践来看，我有以下几点建议：

1. 明确需求是关键：在使用 Vibe Coding 工具时，需求越明确，生成的结果就越符合预期。建议在开始之前，先花时间梳理清楚产品需求。

2. 合理使用工具：不同的 Vibe Coding 工具有其特定的适用场景，选择合适的工具很重要。v0 适合简单前端原型产品的开发，但是设计到产品需求开发，Cursor 可能更适合。

3. 保持学习心态：AI 编程工具在不断进化，作为程序员，我们需要持续学习和适应这些新工具，而不是排斥它们。

当前阶段，大模型工具越来越成熟，但是距离完全替代程序员还有很长的路要走。从我的角度来看，大模型工具已经永远地改变了程序员的工作方式，只有持续拥抱新工具与新技术，才能更好地适应未来的工作方式。未来，我们可能会看到更多类似 v0 这样的工具出现，它们会进一步改变软件开发的方式，但程序员的价值不会消失，而是会转向更高层次的抽象和创造性的工作。








