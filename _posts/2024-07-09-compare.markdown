---
layout: post
title: "来自工业界的开源知识库 RAG 项目最全细节对比"
subtitle:   "The most complete comparison of open source RAG projects from the industry"
date:       2024-07-08 22:00:00
author:     "Bryan"
header-mask: 0.3
catalog:    true
tags:
    - python
    - rag
    - agent
---

## 背景介绍
之前从原理到实现细节整理过来自工业界的不少开源 RAG 项目：

- [有道 QAnything](https://zhuanlan.zhihu.com/p/697031773)
- [RAGFlow](https://zhuanlan.zhihu.com/p/697902937)
- [langchain-chatchat](https://zhuanlan.zhihu.com/p/689947142)
- [中科院 GoMate](https://zhuanlan.zhihu.com/p/705218535)
- [Dify](https://zhuanlan.zhihu.com/p/706381113)
- [FastGPT](https://zhuanlan.zhihu.com/p/707152910)

群里有小伙伴询问在实际的业务需求中如何选择合适的 RAG 项目，本文就详细对比一下这些项目，考虑到目前实际发展程度，GoMate 目前的可靠性还不适合在生产环境使用。因此主要对比其他几个更成熟的热门开源项目。

如果只关心技术选项方案，可以直接看文末的总结。

## 项目基础信息介绍
主要关注项目的一些基础信息，可以给出初步选型比较：

| 项目 |  Star 数量 | 持续维护性 | 社区活跃度 | 代码质量 | 版权信息 |
| --- |  --- | --- | --- | --- | --- |
| [QAnything](https://github.com/netease-youdao/QAnything) | 10.6k | ⭐️ | ⭐️⭐️ | ⭐️⭐️⭐️ | Apache-2.0 |
| [RAGFlow](https://github.com/infiniflow/ragflow) | 11.2k | ⭐️⭐️⭐️ | ⭐️⭐️⭐️ | ⭐️⭐️ | Apache-2.0 |
| [langchain-chatchat](https://github.com/chatchat-space/Langchain-Chatchat) | 29.7k | ⭐️⭐️⭐️ | ⭐️⭐⭐️ | ⭐️⭐️ | Apache-2.0 |
| [Dify](https://github.com/langgenius/dify) | 36.7k | ⭐️⭐️⭐️ | ⭐️⭐️⭐️ | ⭐️⭐️⭐️ | 附加条件的 Apache-2.0 |
| [FastGPT](https://github.com/labring/FastGPT) | 15.3k | ⭐️⭐️⭐️ | ⭐️⭐️⭐️ | ⭐️⭐️ | 附加条件的 Apache-2.0 |

- 项目热度上，Dify 和 langchain-chatchat 因为开源较早，star 数量最多，其他项目也属于比较热的了；
- 项目可维护性上，除了 QAnything 之外的其他项目都在持续更新，QAnything 反馈 5-17 后就不会再新增新功能了，因此建议谨慎选择；
- 代码质量上，QAnything 和 Dify 质量较高；
- 版权问题上，Dify 和 FastGPT 限制不允许用于构建多租户的 Saas 服务，不允许去掉版权信息，其他的都没有限制；

考虑到项目开箱即用的程度以及二次开发的难度，下面主要对比下技术栈：

| 项目 | 前端技术栈 | 后端技术栈 |
| --- |  --- | --- |
| QAnything | 只有打包后前端文件，无法二次开发 | python + sanic |
| RAGFlow | React + TypeScript | python + flask |
| langchain-chatchat | Streamlit 实现的临时前端 | python + FastAPI |
| Dify | NextJs + TypeScript | python + flask |
| FastGPT | NextJs + TypeScript | NextJs + TypeScript |

- 从前端角度来看，langchain-chatchat 没有生产环境可用的前端，QAnything 无法提供可修改的前端，其他几家都有可用的前端页面，技术栈都是基于 React 的
- 从后端角度来看，除了 FastGPT 选择了基于 TypeScript 构建，其他都是基于 Python 开发的；


## 项目框架对比
主要比较不同项目的核心亮点，方便有针对性选择合适的项目

**QAnything**

![qanything](/img/in-post/compare/qanything_arch.png)

- 重点强调 Rerank 机制，强调 Embedding + Rerank 模型的联合使用可以提升文档召回质量；

**RAGFlow**

![ragflow](/img/in-post/compare/ragflow-arch.png)

- 重点强调文档的精细化解析，在文档解析上做了不少优化；

**langchain-chatchat**

![langchain-chatchat](/img/in-post/compare/langchain-chatchat.png)

- 强调支持离线私有化部署，对于私有化部署支持完善

**Dify**

![dify](/img/in-post/compare/dify.png)

- 丰富的召回模式，支持跨知识库召回；
- 支持 QA 模式，可以基于原始文档生成问答对进行召回；
- 支持工作流编排；

**FastGPT**

![fastgpt](/img/in-post/compare/fastgpt.webp)

- 支持 QA 模式，可以基于原始文档生成问答对进行召回；
- 支持工作流编排；

总结而言，如果对于文件精细解析感兴趣，可以优先选择 RAGFlow。如果重点关注离线部署，可以看看 langchain-chatchat。如果希望具备任务流编排或 Agent 相关能力，可以关注 Dify 和 FastGPT


## RAG 能力比较
主要从两个维度比较下能力差异：

1. 文件精细解析能力以及支持的格式；
2. 知识检索效果比较；


## Agent 能力比较
为了更好地使用线上的业务，目前 RAG 框架都开始增加额外的 Agent 的能力，方便更好的适应业务场景。比较主要关注：

1. 能否支持其他第三方工具；
2. 能否支持任务流编排；


## 项目部署比较
RAG 涉及的内容比较多，部署的方案也存在差异，下面主要从两个方面比较差异：

1. 部署难易程度；
2. 是否支持离线部署；


## 总结









